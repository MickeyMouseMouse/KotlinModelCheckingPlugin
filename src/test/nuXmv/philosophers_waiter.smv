MODULE main
VAR
	ph_0 : process philosopher (0, n, states, forks, waiter);
	ph_1 : process philosopher (1, n, states, forks, waiter);
	ph_2 : process philosopher (2, n, states, forks, waiter);
	ph_3 : process philosopher (3, n, states, forks, waiter);
	ph_4 : process philosopher (4, n, states, forks, waiter);
	states : array 0 .. 4 of {THINKING, HUNGRY, LEFTFORK, EATING, RIGHTFORK, FULL};
	forks: array 0 .. 4 of {FREE, BUSY};
	waiter: 0..5;
ASSIGN
	init (forks[0]) := FREE;
	init (forks[1]) := FREE;
	init (forks[2]) := FREE;
	init (forks[3]) := FREE;
	init (forks[4]) := FREE;
	init (waiter) := 0;
DEFINE
	n := 5;

MODULE philosopher(i, n, states, forks, waiter)
DEFINE
	left := i;
	right := (i + 1) mod n;
	state := states[i];
ASSIGN
	init(states[i]) := THINKING;
	
	next(states[i]) := case
		state = THINKING : {THINKING, HUNGRY};
		(state = HUNGRY) & (forks[left] = FREE) & (waiter < n - 1) : LEFTFORK;
		(state = LEFTFORK) & (forks[right] = FREE) : EATING;
		state = EATING : {EATING, FULL};
		state = FULL : RIGHTFORK;
		state = RIGHTFORK : THINKING;
		TRUE : state;
	esac;

	next(forks[left]) := case
		(state = HUNGRY) & (forks[left] = FREE) & (waiter < n - 1) : BUSY;
		state = FULL : FREE;
		TRUE : forks[left];
	esac;

	next(forks[right]) := case
		(state = LEFTFORK) & (forks[right] = FREE) : BUSY;
		state = RIGHTFORK : FREE;
		TRUE : forks[right];
	esac;

	next(waiter) := case
		(state = HUNGRY) & (forks[left] = FREE) & (waiter < n - 1) : waiter + 1;
		(state = LEFTFORK) & (forks[right] = FREE) & (waiter < n) : waiter + 1;
		(state = FULL) & (waiter > 0) : waiter - 1;
		(state = RIGHTFORK) & (waiter > 0) : waiter - 1;
		TRUE : waiter;
	esac;
FAIRNESS
	running


LTLSPEC -- отсутствие дедлока
!F G (
	((states[0]=HUNGRY) | (states[0]=LEFTFORK)) &
	((states[1]=HUNGRY) | (states[1]=LEFTFORK)) & 
	((states[2]=HUNGRY) | (states[2]=LEFTFORK)) &
	((states[3]=HUNGRY) | (states[3]=LEFTFORK)) & 
	((states[4]=HUNGRY) | (states[4]=LEFTFORK))
)

CTLSPEC -- едят двумя вилками (соседние философы не могут есть одновременно)
(AG ((states[0]=EATING -> ( states[4]!=EATING & states[1]!=EATING)) &
(states[1]=EATING -> ( states[0]!=EATING & states[2]!=EATING)) &
(states[2]=EATING -> ( states[1]!=EATING & states[3]!=EATING)) &
(states[3]=EATING -> ( states[2]!=EATING & states[4]!=EATING)) &
(states[4]=EATING -> ( states[3]!=EATING & states[0]!=EATING)) ))

CTLSPEC -- могут есть одновременно
(AG ((EF (states[0]=EATING&states[2]=EATING))&
(EF (states[1]=EATING&states[3]=EATING)) & (EF (states[2]=EATING&states[4]=EATING)) &
(EF (states[3]=EATING&states[0]=EATING)) & (EF (states[4]=EATING&states[1]=EATING))))
